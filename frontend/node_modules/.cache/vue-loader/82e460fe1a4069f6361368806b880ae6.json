{"remainingRequest":"C:\\Users\\herza\\Desktop\\yukleYeniHal\\frontend\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!C:\\Users\\herza\\Desktop\\yukleYeniHal\\frontend\\src\\views\\Home.vue?vue&type=style&index=0&id=fae5bece&lang=css","dependencies":[{"path":"C:\\Users\\herza\\Desktop\\yukleYeniHal\\frontend\\src\\views\\Home.vue","mtime":1718189411953},{"path":"C:\\Users\\herza\\Desktop\\yukleYeniHal\\frontend\\node_modules\\css-loader\\dist\\cjs.js","mtime":1718170859633},{"path":"C:\\Users\\herza\\Desktop\\yukleYeniHal\\frontend\\node_modules\\vue-loader\\lib\\loaders\\stylePostLoader.js","mtime":1718170871392},{"path":"C:\\Users\\herza\\Desktop\\yukleYeniHal\\frontend\\node_modules\\postcss-loader\\src\\index.js","mtime":1718170866707},{"path":"C:\\Users\\herza\\Desktop\\yukleYeniHal\\frontend\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1718170857259},{"path":"C:\\Users\\herza\\Desktop\\yukleYeniHal\\frontend\\node_modules\\vue-loader\\lib\\index.js","mtime":1718170871377}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:DQouaG9tZSB7DQogIGRpc3BsYXk6IGZsZXg7DQogIGZsZXgtZGlyZWN0aW9uOiBjb2x1bW47DQogIGhlaWdodDogMTAwdmg7DQp9DQoNCi5uYXZiYXIgew0KICBkaXNwbGF5OiBmbGV4Ow0KICBhbGlnbi1pdGVtczogY2VudGVyOw0KICBwYWRkaW5nOiAxMHB4Ow0KICBiYWNrZ3JvdW5kLWNvbG9yOiAjMzMzOw0KICBjb2xvcjogI2ZmZjsNCn0NCg0KLm1haW4tY29udGFpbmVyIHsNCiAgZGlzcGxheTogZmxleDsNCiAgZmxleDogMTsNCn0NCg0KLmNvbnRyb2xzIHsNCiAgZGlzcGxheTogZmxleDsNCiAgZmxleC1kaXJlY3Rpb246IGNvbHVtbjsNCiAgcGFkZGluZzogMTBweDsNCiAgYmFja2dyb3VuZC1jb2xvcjogI2Y0ZjRmNDsNCiAgd2lkdGg6IDMwMHB4Ow0KfQ0KDQouYXV0aC1pbnB1dHMgaW5wdXQgew0KICBtYXJnaW4tYm90dG9tOiAxMHB4Ow0KICBwYWRkaW5nOiA4cHg7DQogIHdpZHRoOiA5MCU7DQp9DQoNCi5jaGVja2JveGVzIGxhYmVsIHsNCiAgZGlzcGxheTogZmxleDsNCiAgYWxpZ24taXRlbXM6IGNlbnRlcjsNCiAgbWFyZ2luLWJvdHRvbTogMTBweDsNCn0NCg0KLmJ1dHRvbnMgYnV0dG9uIHsNCiAgbWFyZ2luLWJvdHRvbTogMTBweDsNCiAgcGFkZGluZzogOHB4Ow0KICB3aWR0aDogMTAwJTsNCn0NCg0KLmVkaXRvci1jb250YWluZXIgew0KICBkaXNwbGF5OiBmbGV4Ow0KICBmbGV4LWRpcmVjdGlvbjogY29sdW1uOw0KICBmbGV4OiAxOw0KfQ0KDQouY29kZS1lZGl0b3Igew0KICBmbGV4OiAxOw0KfQ0KDQoucmVzdWx0LWNvbnRhaW5lciB7DQogIGhlaWdodDogMjAwcHg7DQogIGJhY2tncm91bmQtY29sb3I6ICMzMzM7DQogIGNvbG9yOiAjZmZmOw0KfQ0KDQoucmVzdWx0cy10ZXh0YXJlYSB7DQogIHdpZHRoOiAxMDAlOw0KICBoZWlnaHQ6IDEwMCU7DQogIHBhZGRpbmc6IDEwcHg7DQogIGJhY2tncm91bmQtY29sb3I6ICMzMzM7DQogIGNvbG9yOiAjZmZmOw0KICBib3JkZXI6IG5vbmU7DQogIHJlc2l6ZTogbm9uZTsNCn0NCg0KLmVycm9yLW1lc3NhZ2Ugew0KICBjb2xvcjogcmVkOw0KICBtYXJnaW4tdG9wOiAxMHB4Ow0KfQ0K"},{"version":3,"sources":["Home.vue"],"names":[],"mappings":";AAiWA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA","file":"Home.vue","sourceRoot":"src/views","sourcesContent":["<template>\r\n  <div class=\"home\">\r\n    <nav class=\"navbar\">\r\n      <button @click=\"uploadFile\">Dosya Seç</button>\r\n      <input type=\"file\" ref=\"fileInput\" @change=\"onFileChange\" style=\"display: none\" />\r\n      <span>{{ selectedFile ? selectedFile.name : \"No file selected\" }}</span>\r\n    </nav>\r\n    <div class=\"main-container\">\r\n      <div class=\"controls\">\r\n        <div class=\"auth-inputs\">\r\n          <input type=\"text\" v-model=\"authTokens.Bearer\" placeholder=\"Bearer Token\" />\r\n          <input type=\"text\" v-model=\"authTokens.apiKey\" placeholder=\"API Key\" />\r\n          <input type=\"text\" v-model=\"authTokens.oAuth2\" placeholder=\"OAuth2 Token\" />\r\n        </div>\r\n        <div class=\"checkboxes\">\r\n          <label><input type=\"radio\" value=\"Post Generator\" v-model=\"selectedGenerator\" /> Post Generator</label>\r\n          <label><input type=\"radio\" value=\"Get Generator\" v-model=\"selectedGenerator\" /> Get Generator</label>\r\n          <label><input type=\"radio\" value=\"Put Generator\" v-model=\"selectedGenerator\" /> Put Generator</label>\r\n          <label><input type=\"radio\" value=\"Delete Generator\" v-model=\"selectedGenerator\" /> Delete Generator</label>\r\n          <label><input type=\"radio\" value=\"All Methods Generator\" v-model=\"selectedGenerator\" /> All Methods Generator</label>\r\n        </div>\r\n        <div class=\"buttons\">\r\n          <button @click=\"generateCode\">Generate Code</button>\r\n          <button @click=\"runTests\" :disabled=\"isRunningTests\">Run Tests</button>\r\n          <button @click=\"downloadCode\">Download Code</button>\r\n          <button @click=\"downloadBoilerplate\">Download Boilerplate</button>\r\n          <label class=\"edit-toggle\">\r\n            <input type=\"checkbox\" v-model=\"isEditable\" /> Düzenle\r\n          </label>\r\n        </div>\r\n        <div v-if=\"errorMessage\" class=\"error-message\">{{ errorMessage }}</div>\r\n      </div>\r\n      <div class=\"editor-container\">\r\n        <monaco-editor\r\n          v-model=\"generatedCode\"\r\n          language=\"javascript\"\r\n          theme=\"vs-dark\"\r\n          :options=\"{ readOnly: !isEditable }\"\r\n          class=\"code-editor\"\r\n        />\r\n        <div class=\"result-container\">\r\n          <textarea ref=\"resultsTextarea\" v-model=\"testResults\" class=\"results-textarea\" readonly></textarea>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  </div>\r\n</template>\r\n\r\n<script>\r\nimport MonacoEditor from \"@guolao/vue-monaco-editor\";\r\nimport SwaggerParser from \"swagger-parser\";\r\nimport yaml from \"js-yaml\";\r\nimport JSZip from \"jszip\";\r\nimport { saveAs } from \"file-saver\";\r\n\r\nexport default {\r\n  components: {\r\n    MonacoEditor\r\n  },\r\n  data() {\r\n    return {\r\n      authTokens: {\r\n        Bearer: \"\",\r\n        apiKey: \"\",\r\n        oAuth2: \"\"\r\n      },\r\n      selectedGenerator: '',\r\n      generatedCode: \"\",\r\n      testResults: \"\",\r\n      selectedFile: null,\r\n      isEditable: false,\r\n      isRunningTests: false, // new data property\r\n      errorMessage: \"\"\r\n    };\r\n  },\r\n  methods: {\r\n    uploadFile() {\r\n      this.$refs.fileInput.click();\r\n    },\r\n    onFileChange(event) {\r\n      this.selectedFile = event.target.files[0];\r\n      this.errorMessage = \"\";\r\n      this.validateSwaggerFile();\r\n    },\r\n    async validateSwaggerFile() {\r\n      try {\r\n        const reader = new FileReader();\r\n        reader.onload = async (e) => {\r\n          try {\r\n            const content = e.target.result;\r\n            if (this.selectedFile.name.endsWith(\".json\")) {\r\n              await SwaggerParser.validate(JSON.parse(content));\r\n            } else if (this.selectedFile.name.endsWith(\".yaml\") || this.selectedFile.name.endsWith(\".yml\")) {\r\n              const jsonContent = yaml.load(content);\r\n              await SwaggerParser.validate(jsonContent);\r\n            } else {\r\n              throw new Error(\"Unsupported file format\");\r\n            }\r\n            this.errorMessage = \"\";\r\n          } catch (error) {\r\n            this.errorMessage = \"Yüklenen dosya geçerli bir Swagger dökümanı değil.\";\r\n            this.selectedFile = null;\r\n          }\r\n        };\r\n        reader.readAsText(this.selectedFile);\r\n      } catch (error) {\r\n        this.errorMessage = \"Dosya okunurken hata oluştu.\";\r\n        this.selectedFile = null;\r\n      }\r\n    },\r\n    async generateCode() {\r\n      this.errorMessage = \"\";\r\n      this.testResults = \"\";  // Clear test results\r\n      this.$refs.resultsTextarea.readOnly = true;  // Set read-only\r\n\r\n      if (!this.selectedFile) {\r\n        this.errorMessage = \"Lütfen bir dosya seçiniz.\";\r\n        return;\r\n      }\r\n      if (!this.selectedGenerator) {\r\n        this.errorMessage = \"Lütfen bir metot seçiniz.\";\r\n        return;\r\n      }\r\n\r\n      console.log('Generating code...');\r\n      console.log('Selected file:', this.selectedFile);\r\n      console.log('Auth tokens:', this.authTokens);\r\n      console.log('Selected generator:', this.selectedGenerator);\r\n\r\n      const formData = new FormData();\r\n      formData.append('file', this.selectedFile);\r\n      formData.append('authTokens', JSON.stringify(this.authTokens));\r\n      formData.append('selectedGenerators', JSON.stringify([this.selectedGenerator]));\r\n\r\n      try {\r\n        const response = await fetch('http://localhost:3000/generate-code', {\r\n          method: 'POST',\r\n          body: formData\r\n        });\r\n\r\n        if (!response.ok) {\r\n          const error = await response.json();\r\n          console.error('Error in response:', error);\r\n          return;\r\n        }\r\n\r\n        const data = await response.json();\r\n        this.generatedCode = data.generatedCode;\r\n      } catch (error) {\r\n        console.error('Error generating code:', error);\r\n        this.errorMessage = \"Kod oluşturulurken hata oluştu.\";\r\n      }\r\n    },\r\n    async runTests() {\r\n      this.errorMessage = \"\";\r\n      this.testResults = \"running tests...\";  // Show running tests message\r\n      this.isRunningTests = true; // Disable the button\r\n\r\n      if (!this.generatedCode) {\r\n        this.errorMessage = \"Lütfen kodu oluşturunuz.\";\r\n        this.isRunningTests = false; // Re-enable the button\r\n        return;\r\n      }\r\n\r\n      console.log(\"Running tests with code:\", this.generatedCode);\r\n\r\n      try {\r\n        const response = await fetch('http://localhost:3000/run-tests', {\r\n          method: 'POST',\r\n          headers: {\r\n            'Content-Type': 'application/json'\r\n          },\r\n          body: JSON.stringify({ code: this.generatedCode })\r\n        });\r\n\r\n        if (!response.ok) {\r\n          const error = await response.json();\r\n          console.error('Error in response:', error);\r\n          this.isRunningTests = false; // Re-enable the button\r\n          return;\r\n        }\r\n\r\n        const data = await response.json();\r\n        this.testResults = data.testResults.join('\\n');\r\n      } catch (error) {\r\n        console.error('Error running tests:', error);\r\n        this.errorMessage = \"Testler çalıştırılırken hata oluştu.\";\r\n      } finally {\r\n        this.isRunningTests = false; // Re-enable the button\r\n      }\r\n    },\r\n    downloadCode() {\r\n      const blob = new Blob([this.generatedCode], { type: \"text/plain;charset=utf-8\" });\r\n      saveAs(blob, \"generatedCode.ts\");\r\n    },\r\n    async downloadBoilerplate() {\r\n      const zip = new JSZip();\r\n      const srcFolder = zip.folder(\"src\");\r\n\r\n      // Add necessary boilerplate files\r\n      const packageJson = `\r\n      {\r\n        \"name\": \"api-tester\",\r\n        \"version\": \"1.0.0\",\r\n        \"main\": \"index.js\",\r\n        \"license\": \"MIT\",\r\n        \"scripts\": {\r\n          \"start\": \"ts-node src/tempCode.ts\"\r\n        },\r\n        \"dependencies\": {\r\n          \"axios\": \"^0.21.1\"\r\n        },\r\n        \"devDependencies\": {\r\n          \"@types/node\": \"^14.14.37\",\r\n          \"ts-node\": \"^9.1.1\",\r\n          \"typescript\": \"^4.2.3\"\r\n        }\r\n      }\r\n      `;\r\n      const tsconfigJson = `\r\n      {\r\n        \"compilerOptions\": {\r\n          \"target\": \"es6\",\r\n          \"module\": \"commonjs\",\r\n          \"strict\": true,\r\n          \"esModuleInterop\": true,\r\n          \"skipLibCheck\": true,\r\n          \"forceConsistentCasingInFileNames\": true\r\n        }\r\n      }\r\n      `;\r\n      const indexJs = `\r\n      const { exec } = require(\"child_process\");\r\n      const fs = require(\"fs\");\r\n      const path = require(\"path\");\r\n\r\n      async function runCode(code) {\r\n          const tempTsFilePath = path.join(__dirname, \"src\", \"tempCode.ts\");\r\n          fs.writeFileSync(tempTsFilePath, code);\r\n\r\n          const command = \\`npx ts-node --project \\${path.join(__dirname, \"tsconfig.json\")} \\${tempTsFilePath}\\`;\r\n          return new Promise((resolve, reject) => {\r\n              exec(command, { cwd: __dirname }, (error, stdout, stderr) => {\r\n                  try {\r\n                      fs.unlinkSync(tempTsFilePath);\r\n                  } catch (err) {\r\n                    console.error(\\`Failed to delete temporary file: \\${err.message}\\`);\r\n                  }\r\n\r\n                  if (error) {\r\n                      console.error(\\`Error running tests: \\${stderr || error.message}\\`);\r\n                      return reject(\\`Error running tests: \\${stderr || error.message}\\`);\r\n                  }\r\n\r\n                  const results = stdout.split('\\\\n').filter(line => line.includes('Request to') || line.includes('Error in'));\r\n                  resolve(results);\r\n              });\r\n          });\r\n      }\r\n\r\n      module.exports = { runCode };\r\n      `;\r\n      const sendRequestsTs = `\r\n      import axios from 'axios';\r\n\r\n      export async function sendGetRequest(method: string, url: string, headers: Record<string, string>) {\r\n          process.env.NODE_TLS_REJECT_UNAUTHORIZED = \"0\";\r\n          let config = {\r\n              method: method,\r\n              url: url,\r\n              headers: headers,\r\n          };\r\n\r\n          try {\r\n              const response = await axios(config);\r\n              console.log(\\`\\${config.method.toUpperCase()} Request to \\${config.url}: Status code \\${response.status}\\`);\r\n              return \\`\\${config.method.toUpperCase()} Request to \\${config.url}: Status code \\${response.status}\\`;\r\n          } catch (error) {\r\n              console.error(\\`Error in \\${config.method.toUpperCase()} Request to \\${config.url}:\\`, error.message);\r\n              return \\`Error in \\${config.method.toUpperCase()} Request to \\${config.url}: \\${error.message}\\`;\r\n          }\r\n      }\r\n\r\n      export async function sendPostRequest(method: string, url: string, headers: Record<string, string>, data: any) {\r\n          process.env.NODE_TLS_REJECT_UNAUTHORIZED = \"0\";\r\n          let config = {\r\n              method: method,\r\n              url: url,\r\n              headers: headers,\r\n              data: data\r\n          };\r\n\r\n          try {\r\n              const response = await axios(config);\r\n              console.log(\\`\\${config.method.toUpperCase()} Request to \\${config.url}: Status code \\${response.status}\\`);\r\n              return \\`\\${config.method.toUpperCase()} Request to \\${config.url}: Status code \\${response.status}\\`;\r\n          } catch (error) {\r\n              console.error(\\`Error in \\${config.method.toUpperCase()} Request to \\${config.url}:\\`, error.message);\r\n              return \\`Error in \\${config.method.toUpperCase()} Request to \\${config.url}: \\${error.message}\\`;\r\n          }\r\n      }\r\n\r\n      export async function sendPutRequest(method: string, url: string, headers: Record<string, string>, data: any) {\r\n          process.env.NODE_TLS_REJECT_UNAUTHORIZED = \"0\";\r\n          let config = {\r\n              method: method,\r\n              url: url,\r\n              headers: headers,\r\n              data: data\r\n          };\r\n\r\n          try {\r\n              const response = await axios(config);\r\n              console.log(\\`\\${config.method.toUpperCase()} Request to \\${config.url}: Status code \\${response.status}\\`);\r\n              return \\`\\${config.method.toUpperCase()} Request to \\${config.url}: Status code \\${response.status}\\`;\r\n          } catch (error) {\r\n              console.error(\\`Error in \\${config.method.toUpperCase()} Request to \\${config.url}:\\`, error.message);\r\n              return \\`Error in \\${config.method.toUpperCase()} Request to \\${config.url}: \\${error.message}\\`;\r\n          }\r\n      }\r\n\r\n      export async function sendDeleteRequest(method: string, url: string, headers: Record<string, string>) {\r\n          process.env.NODE_TLS_REJECT_UNAUTHORIZED = \"0\";\r\n          let config = {\r\n              method: method,\r\n              url: url,\r\n              headers: headers,\r\n          };\r\n\r\n          try {\r\n              const response = await axios(config);\r\n              console.log(\\`\\${config.method.toUpperCase()} Request to \\${config.url}: Status code \\${response.status}\\`);\r\n              return \\`\\${config.method.toUpperCase()} Request to \\${config.url}: Status code \\${response.status}\\`;\r\n          } catch (error) {\r\n              console.error(\\`Error in \\${config.method.toUpperCase()} Request to \\${config.url}:\\`, error.message);\r\n              return \\`Error in \\${config.method.toUpperCase()} Request to \\${config.url}: \\${error.message}\\`;\r\n          }\r\n      }\r\n      `;\r\n      const tempCodeTs = this.generatedCode;\r\n\r\n      zip.file(\"package.json\", packageJson);\r\n      zip.file(\"tsconfig.json\", tsconfigJson);\r\n      srcFolder.file(\"sendRequests.ts\", sendRequestsTs);\r\n      srcFolder.file(\"tempCode.ts\", tempCodeTs);\r\n      const content = await zip.generateAsync({ type: \"blob\" });\r\n      saveAs(content, \"boilerplate.zip\");\r\n    }\r\n  }\r\n};\r\n</script>\r\n\r\n<style>\r\n.home {\r\n  display: flex;\r\n  flex-direction: column;\r\n  height: 100vh;\r\n}\r\n\r\n.navbar {\r\n  display: flex;\r\n  align-items: center;\r\n  padding: 10px;\r\n  background-color: #333;\r\n  color: #fff;\r\n}\r\n\r\n.main-container {\r\n  display: flex;\r\n  flex: 1;\r\n}\r\n\r\n.controls {\r\n  display: flex;\r\n  flex-direction: column;\r\n  padding: 10px;\r\n  background-color: #f4f4f4;\r\n  width: 300px;\r\n}\r\n\r\n.auth-inputs input {\r\n  margin-bottom: 10px;\r\n  padding: 8px;\r\n  width: 90%;\r\n}\r\n\r\n.checkboxes label {\r\n  display: flex;\r\n  align-items: center;\r\n  margin-bottom: 10px;\r\n}\r\n\r\n.buttons button {\r\n  margin-bottom: 10px;\r\n  padding: 8px;\r\n  width: 100%;\r\n}\r\n\r\n.editor-container {\r\n  display: flex;\r\n  flex-direction: column;\r\n  flex: 1;\r\n}\r\n\r\n.code-editor {\r\n  flex: 1;\r\n}\r\n\r\n.result-container {\r\n  height: 200px;\r\n  background-color: #333;\r\n  color: #fff;\r\n}\r\n\r\n.results-textarea {\r\n  width: 100%;\r\n  height: 100%;\r\n  padding: 10px;\r\n  background-color: #333;\r\n  color: #fff;\r\n  border: none;\r\n  resize: none;\r\n}\r\n\r\n.error-message {\r\n  color: red;\r\n  margin-top: 10px;\r\n}\r\n</style>\r\n"]}]}